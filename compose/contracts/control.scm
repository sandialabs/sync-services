'(lambda (record secret-hash query)
   (define (authenticate secret)
     (if (not (equal? secret-hash (sync-hash (expression->byte-vector secret))))
         (error 'authentication-failure "Could not identify as self")))

   (define (less? x y)
     (cond ((and (number? x) (number? y)) (< x y))
           ((and (number? x) (not (number? y))) #t)
           ((and (not (number? x)) (number? y)) #f)
           (else (string<=? (symbol->string x) (symbol->string y)))))

   (define result
     (cond ((eq? (car query) '*record*)
            (authenticate (cadr query))
            ((eval (caddr query)) record))
           ((eq? (car query) '*step*)
            (authenticate (cadr query))
            (let ((names (cadr ((record 'get) '(control step)))))
              (let loop ((names (sort! names less?)) (rets '()))
                (if (null? names) (reverse rets)
                    (let ((ret (sync-call
                                `(*record*
                                  ,(cadr query)
                                  (lambda (record)
                                    (let* ((path '(control step ,(car names)))
                                           (expr (cadr ((record 'get) path))))
                                      ((eval expr) record)))) #t)))
                      (loop (cdr names) (cons (cons (car names) ret) rets)))))))
           ((eq? (car query) '*local*)
            (authenticate (cadr query))
            (let ((function ((record 'get) `(control local ,(caaddr query)))))
              (if (eq? (car function) 'nothing)
                  (error 'unknown-function "Function not found")
                  (apply (eval (cadr function))
                         (cons record (cdaddr query))))))
           (else
            (let ((function ((record 'get) `(control remote ,(car query)))))
              (if (eq? (car function) 'nothing)
                  (error 'unknown-function "Function not found")
                  (apply (eval (cadr function))
                         (cons record (cdr query))))))))
   ((record 'set!) '(control scratch) #f)
   result)